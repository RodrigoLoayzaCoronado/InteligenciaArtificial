# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19fJvCj70-t2btm1O45EGjZJDHj_RETv8
"""

# Commented out IPython magic to ensure Python compatibility.
# Importar las librerías necesarias
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np


# llama a matplotlib a embeber graficas dentro de los cuadernillos
# %matplotlib inline

from google.colab import drive
drive.mount('/content/drive')

"""SE UTILIZARA LA LIBRERIA PANDAS PARA LEER LOS DATOS"""

# Leer los datos generados desde la carpeta 'dataset'
df = pd.read_csv('/content/drive/MyDrive/SIS420 Inteligencia Artificial/SegundoSemestre/Dataset/01.csv')

# Visualizar los primeros registros
print(df)

"""LA GRAFICA MUESTRA LA DISTRIBUCION DE PUNTOS EN LAS COORDENADAS X ESTATURA Y PESO Y

"""

# Graficar los puntos
plt.scatter(df['Estatura'], df['Peso'])
plt.xlabel('Estatura (m)')
plt.ylabel('Peso (kg)')
plt.title('Distribución de Peso y Estatura')
plt.show()

"""PREPARAMOS LOS DATOS DONDE SE GUARDA LOS VALORES DE ESTATURA EN LA VARIABLE X Y PESO QUE SE GUARDA EN LA VARIABLE Y"""

# Preparar los datos para la regresión lineal
X = df['Estatura'].values
y = df['Peso'].values

"""APLICAMOS REGRESION LINEAL PARA LA PREDICCION"""

# Calcular la media
def media(valores):
    return sum(valores) / len(valores)

# Calcular la pendiente (m) y la intersección (b) de la recta
def calcular_coeficientes(X, y):
    n = len(X)
    x_mean = media(X)
    y_mean = media(y)

    # Calcular la suma de los productos y la suma de los cuadrados
    suma_xy = sum((X[i] - x_mean) * (y[i] - y_mean) for i in range(n))
    suma_xx = sum((X[i] - x_mean) ** 2 for i in range(n))

    # Calcular la pendiente (m)
    m = suma_xy / suma_xx

    # Calcular la intersección (b)
    b = y_mean - m * x_mean

    return m, b

# Calcular los coeficientes
m, b = calcular_coeficientes(X, y)

# Obtener los valores predichos
predicciones = [m * x + b for x in X]

# Graficar la curva de regresión
plt.scatter(df['Estatura'], df['Peso'], label='Datos Reales')
plt.plot(df['Estatura'], predicciones, color='red', label='Curva de Regresión')
plt.xlabel('Estatura (m)')
plt.ylabel('Peso (kg)')
plt.title('Curva de Regresión Lineal')
plt.legend()
plt.show()

print(f"Coeficiente de la regresión: {m}")
print(f"Intercepto: {b}")